name: CI/CD

on:
  push:
    branches: [ main]
  pull_request:
    branches: [ main]

env:
  WHITELIST: ${{secrets.WHITELIST}}
jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Bootstrap poetry
        run: pipx install poetry
      - name: Configure poetry
        run: |
          poetry config virtualenvs.in-project true
          poetry env use python
      - name: Set up cache
        uses: actions/cache@v3
        if: matrix.project != 'poetry-core'
        id: cache
        with:
          path: ./.venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('poetry.lock') }}
      - name: Install requirements
        shell: bash
        run: poetry install --only=code_quality
      - name: Run Ruff
        shell: bash
        run: poetry run ruff check . && poetry run ruff format -q
      
  diff:
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    steps:
      - uses: eloymg/github-actions/setup-cdk@v0.1
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Bootstrap poetry
        run: pipx install poetry
      - name: Configure poetry
        run: |
          poetry config virtualenvs.in-project true
          poetry env use python
      - name: Set up cache
        uses: actions/cache@v3
        if: matrix.project != 'poetry-core'
        id: cache
        with:
          path: ./.venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('poetry.lock') }}
      - name: Install requirements
        shell: bash
        run: poetry install
      - name: Login to aws
        uses: aws-actions/configure-aws-credentials@v4
        id: aws-login
        with:
          role-to-assume: ${{ secrets.rolearn }}
          aws-region: "eu-west-1"
          audience: sts.amazonaws.com
      - name: CDK diff
        shell: bash
        run: |
          OUTPUT=$(poetry run cdk diff|tr '$'  ' '|tr '/"' ' ')
          echo "CDK_DIFF_OUTPUT<<EOF" >> $GITHUB_ENV
          echo "$OUTPUT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Colorize
        uses: eloymg/github-actions/colorize-diff@v0.1
        with:
          cdk-diff-output: ${{ env.CDK_DIFF_OUTPUT }}

  deploy:
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: eloymg/github-actions/setup-cdk@v0.1
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: poetry
      - name: Bootstrap poetry
        run: pipx install poetry
      - name: Configure poetry
        run: |
          poetry config virtualenvs.in-project true
          poetry env use python
      - name: Set up cache
        uses: actions/cache@v3
        if: matrix.project != 'poetry-core'
        id: cache
        with:
          path: ./.venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('poetry.lock') }}
      - name: Install requirements
        shell: bash
        run: poetry install
      - name: Login to aws
        uses: aws-actions/configure-aws-credentials@v4
        id: aws-login
        with:
          role-to-assume: ${{ secrets.rolearn }}
          aws-region: "eu-west-1"
          audience: sts.amazonaws.com
      - name: CDK deploy
        run: |
          poetry run cdk deploy --all --concurrency 20 --require-approval never